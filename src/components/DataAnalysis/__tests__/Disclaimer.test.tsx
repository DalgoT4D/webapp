import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Disclaimer } from '../Disclaimer'; // Update the path accordingly
import { httpPut } from '@/helpers/http';
import { useSession } from 'next-auth/react';

jest.mock('@/helpers/http', () => ({
  httpPut: jest.fn(),
}));

jest.mock('next-auth/react', () => ({
  useSession: jest.fn(),
}));

describe('Disclaimer Component', () => {
  beforeEach(() => {
    (useSession as jest.Mock).mockReturnValue({
      data: {
        user: {
          email: 'test@example.com',
        },
      },
    });
  });

  it('should render the disclaimer dialog', () => {
    const setIsOpen = jest.fn();

    render(<Disclaimer open={true} setIsOpen={setIsOpen} />);

    // Check if the disclaimer title is rendered
    expect(screen.getByText('Disclaimer')).toBeInTheDocument();
    // Check if the disclaimer text is rendered
    expect(
      screen.getByText(
        /this content has been generated by an artificial intelligence language model, and it is provided as-is without any warranties or guarantees of accuracy/i
      )
    ).toBeInTheDocument();
  });

  it('should call handleOkayButton and close the dialog on successful API call', async () => {
    const setIsOpen = jest.fn();
    (httpPut as jest.Mock).mockResolvedValue({ email: 'test@example.com' });

    render(<Disclaimer open={true} setIsOpen={setIsOpen} />);

    // Simulate clicking the "Okay" button
    const okayButton = screen.getByText('Okay');
    fireEvent.click(okayButton);

    // Wait for the API call and dialog close
    await waitFor(() => {
      expect(httpPut).toHaveBeenCalledWith(
        { user: { email: 'test@example.com' } },
        'v1/organizations/user_self',
        {
          toupdate_email: 'test@example.com',
          llm_optin: true,
        }
      );
      expect(setIsOpen).toHaveBeenCalledWith(false);
    });
  });

  it('should handle API failure and log error', async () => {
    const setIsOpen = jest.fn();
    const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
    (httpPut as jest.Mock).mockRejectedValue(new Error('API Error'));

    render(<Disclaimer open={true} setIsOpen={setIsOpen} />);

    // Simulate clicking the "Okay" button
    const okayButton = screen.getByText('Okay');
    fireEvent.click(okayButton);

    // Wait for the error log
    await waitFor(() => {
      expect(httpPut).toHaveBeenCalled();
      expect(consoleSpy).toHaveBeenCalledWith(new Error('API Error'), 'error');
      expect(setIsOpen).not.toHaveBeenCalled();
    });

    consoleSpy.mockRestore();
  });
});
